Naive Method - 시간 O(n^2) 및 공간 O(1)

Two Pointer
Two Sum in Sorted Arrays, Closet Two Sum, Three Sum, Four Sum, Trapping Rain Water
정렬된 배열 arr(오름차순으로 정렬)과 대상이 주어졌을 때, 합이 대상과 같은 요소쌍(arr[i], arr[j])이 있는지 찾습니다.

입력 : arr[] = {10, 20, 35, 50}, target = 70
출력 : 예
설명 : 주어진 대상을 갖는 쌍 (20, 50)이 있습니다.

입력 : arr[] = {10, 20, 30}, target = 70
출력 : 아니요
설명 : 합계 70이 있는 쌍은 없습니다.

입력 : arr[] = {-8, 1, 4, 6, 10, 45}, traget = 16
출력 : 예
설명 : 주어진 대상을 갖는 쌍 {6, 10}이 있습니다.

Navie Method - 시간복잡도 O(n^2) 및 공간복잡도 O(1)
가장 기본적인 접근 방식은 가능한 모든 쌍을 생성하고 그 중 하나라도 목표 값에 합산되는지 확인한다.
모든 쌍을 생성하려면 두 개의 중첩 루프를 실행하기만 하면 됩니다.

Two Pointer Technique은 정렬된 배열에 적합한 이 문제에 대한 가장 좋은 솔루션입니다.

투 포인터 기법 - O(N) 시간과 O(1) 공간
이 기술의 아이디어는 주어진 배열의 두 모서리에서 시작하는 것입니다. 우리는 두 개의 인덱스 변수 left와 right를 사용하여
두 모서리에서 탐색합니다.

초기화 : left = 0, right = n-1  left<right 인 동안 루프를 실행하고 루프 내부에서 다음을 수행합니다.

- 현재 합계를 계산합니다. 합계 = arr[left] + arr[right]
- 만약 합계가 목표와 같으면, 우리는 쌍을 찾은 것입니다.
- 합계가 목표보다 작으면 왼쪽 포인터를 오른쪽으로 옮겨 합계를 늘립니다.
- 합계가 목표보다 크면 오른쪽 포인터를 왼쪽으로 옮겨 합계를 줄입니다.


